---
import sendGrid from '@sendgrid/mail';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';


sendGrid.setApiKey(import.meta.env.SENDGRID_API_KEY);

// Variables dinámicas (props)
const {
  title = "Solicita tu Presupuesto Personalizado",
  subtitle = "Nuestros comerciales se pondrán en contacto con la mejor oferta.",
  tagline = "Rellena el formulario para obtener una oferta personalizada.",
  id = "form-calendarios",
  isDark = false,
  inputs = [], // Inputs personalizados según el formulario
  button = "Solicitar Presupuesto",
  onSubmit = "/formularios/calendarios-mesa-espiral", // Ruta donde se envía el formulario
  classes = {},
  bg = '',
} = Astro.props;

const calendarTypes = [
  { value: 'mesa-espiral', label: 'Mesa Espiral' },
  { value: 'mesa-triangular', label: 'Mesa Triangular' },
  { value: 'pared-revista', label: 'Pared Revista' },
  { value: 'pared-espiral', label: 'Pared Espiral' }
];

const calendarSizes = {
  'mesa-espiral': ['21x10cm', '15x15cm'],
  'mesa-triangular': ['A5', '25x15cm'],
  'pared-espiral': ['24x34cm', '34x24cm'],
  'pared-revista': ['34x48cm'],
};

const calendarQuantities = [50, 100, 200, 500, 1000];
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-6xl mx-auto p-6 bg-white shadow-lg rounded-lg ${classes?.container ?? ''}`}
  bg={bg}
>

  <!-- Títulos del formulario -->
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <!-- Formulario modular -->
  <form method="POST" action={onSubmit} class="flex flex-col max-w-xl mx-auto space-y-6">
    
    <!-- Nombre -->
    <div class="relative w-full mb-4">
      <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre *</label>
      <input id="nombre" name="nombre" required placeholder="Introduce tu nombre" class="form-input py-2 px-4 border rounded-lg w-full" />
    </div>

    <!-- Email -->
    <div class="relative w-full mb-4">
      <label for="email" class="block text-sm font-medium text-gray-700">Email *</label>
      <input id="email" name="email" type="email" required placeholder="Introduce tu email" class="form-input py-2 px-4 border rounded-lg w-full" />
    </div>

    <!-- Tipo de Calendario -->
    <div class="relative w-full mb-4">
      <label for="tipoCalendario" class="block text-sm font-medium text-gray-700">Tipo de Calendario *</label>
      <select id="tipoCalendario" name="tipoCalendario" required class="form-select py-2 px-4 border rounded-lg w-full">
        {calendarTypes.map(type => (
          <option value={type.value}>{type.label}</option>
        ))}
      </select>
    </div>

    <!-- Tamaño (Dependiendo del tipo de calendario) -->
    <div class="relative w-full mb-4">
      <label for="tamaño" class="block text-sm font-medium text-gray-700">Tamaño *</label>
      <select id="tamaño" name="tamaño" required class="form-select py-2 px-4 border rounded-lg w-full">
        <option value="" disabled selected>Selecciona un tamaño</option>
        {calendarSizes['mesa-espiral'].map(size => (
          <option value={size}>{size}</option>
        ))}
      </select>
    </div>

    <!-- Cantidad -->
    <div class="relative w-full mb-4">
      <label for="cantidad" class="block text-sm font-medium text-gray-700">Cantidad *</label>
      <select id="cantidad" name="cantidad" required class="form-select py-2 px-4 border rounded-lg w-full">
        {calendarQuantities.map(quantity => (
          <option value={quantity}>{quantity}</option>
        ))}
      </select>
    </div>

    <!-- Política de privacidad -->
    <div class="relative w-full mb-4">
      <label class="flex items-center">
        <input type="checkbox" name="politicaPrivacidad" id="politicaPrivacidad" required class="mr-2" />
        Acepto la política de privacidad *
      </label>
    </div>

    <!-- Botón de Enviar -->
    <div class="text-center">
      <button type="submit" class="bg-blue-600 text-white py-2 px-6 rounded-full hover:bg-blue-700">
        {button}
      </button>
    </div>
  </form>
</WidgetWrapper>

<script type="module">
  // Lógica para actualizar tamaños según el tipo de calendario seleccionado
  const calendarTypeSelect = document.getElementById('tipoCalendario');
  const sizeSelect = document.getElementById('tamaño');

  calendarTypeSelect.addEventListener('change', (event) => {
    const selectedType = event.target.value;
    const sizes = calendarSizes[selectedType];

    // Limpiar las opciones del tamaño
    sizeSelect.innerHTML = '<option value="" disabled selected>Selecciona un tamaño</option>';

    // Agregar nuevas opciones según el tipo seleccionado
    sizes.forEach(size => {
      const option = document.createElement('option');
      option.value = size;
      option.textContent = size;
      sizeSelect.appendChild(option);
    });
  });
</script>
