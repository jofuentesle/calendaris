const id = "astrowind-template-in-depth.mdx";
						const collection = "post";
						const slug = "astrowind-template-in-depth";
						const body = "\r\nimport DListItem from '~/components/ui/DListItem.astro';\r\nimport ToggleTheme from '~/components/common/ToggleTheme.astro';\r\n\r\n## Overview\r\n\r\nIt can be a somewhat daunting task trying to get a handle on _AstroWind_ internals, and particularly various points of usage.\r\n\r\nThis page outlines and clarifies some of the techniques found in _AstroWind_. Use it as a guide for further modification, or an instructional for techniques to use in your own endeavors.\r\n\r\n## Styling\r\n\r\nAs the name suggests, _AstroWind_ relies on _TailWind_ for styling. Furthermore, _AstroWind_ defines custom low level style settings which are incorporated into _TailWind_ seamlessly, and which provides consistency for higher level styling constructs, as well as enabling dark mode.\r\n\r\nThe styling mechanism consists of the following files (all paths are prefixed with `/src/` ):\r\n\r\n<DListItem dt=\"assets/styles/tailwind.css\">\r\n  This file is essentially an extension of _TailWind's_ base.css. High-level component styles are defined here. Note\r\n  also styling on elements selected by 'attribute' selectors at the bottom of the files, particularly those selected by\r\n  'data' attributes.\r\n</DListItem>\r\n<DListItem dt=\"components/CustomStyles.astro\">\r\n  Defines custom colors and fonts. For these to take effect in the 'base.css' file, they need to be loaded in the html\r\n  header section. See next.\r\n</DListItem>\r\n<DListItem dt=\"layouts/Layout.astro\">\r\n  This layout is used for all of the pages rendered by _AstroWind_. The contents of _tailwind.css_ and\r\n  _CustomStyles.astro_ component, described above, is injected into the html header.\r\n</DListItem>\r\n\r\n### Dark Mode\r\n\r\n_Dark Mode_ is triggered by the little 'sunlight' icon:<ToggleTheme/>in the page header. It is defined in the _components/common/ToggleTheme.astro_, but the event is attached and the action defined in _components/common/BasicScripts.astro_ in the following snippet:\r\n\r\n```javascript\r\nattachEvent('[data-aw-toggle-color-scheme]', 'click', function () {\r\n  if (defaultTheme.endsWith(':only')) {\r\n    return;\r\n  }\r\n  document.documentElement.classList.toggle('dark');\r\n  localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';\r\n});\r\n```\r\n\r\nNote that this is a client event. _BasicScripts.astro_ defines several other client-side functionality as well as this one.\r\n\r\n## Advanced Slot Usage\r\n\r\n_slots_ are part of the component implementation, which is a common concept among many frameworks, including _Astrojs_. The typical slot definition in a component looks like this:\r\n\r\n```astro\r\n---\r\n// (file: MyComponent.astro)\r\nconst { title } = Astro.props;\r\nexport interface Props {\r\n  title: string;\r\n}\r\n---\r\n\r\n<div>\r\n  <h2>{title}</h2>\r\n  <slot />\r\n  <!-- slot contents injected here -->\r\n  <div></div>\r\n</div>\r\n```\r\n\r\nAnd in usage elsewhere:\r\n\r\n```astro\r\nimport MyComponent from \"~/components/MyComponent\"; ...\r\n<MyComponent someArg=\"A Slot example\">\r\n  <p>This content will be displayed in the slot</p>\r\n</MyComponent>\r\n```\r\n\r\n### Alternate usage\r\n\r\nThere's another way we can use slots, useful particularly when a component can have markdown content is as follows (study carefully...):\r\n\r\n```astro\r\n---\r\n// (file: MyComponent.astro)\r\n\r\nconst { title } = Astro.props;\r\nexport interface Props {\r\n  title: string;\r\n}\r\nconst content: string = await Astro.props.render('default');\r\n---\r\n\r\n// renders the html to the 'content' variable\r\n<div>\r\n  <h2>{title}</h2>\r\n  <div set:html={content} />\r\n  <!-- slot contents injected here -->\r\n  <div></div>\r\n</div>\r\n```\r\n\r\nWhoa!! What's going on here?\r\n\r\nNotice there is no slot definition in the html portion of the component. Instead, what we do is have _Astro_ render the slot content (here, the 'default' content, but you can also render named slots) into a variable, and then use that content in a _div_ (for instance).\r\n\r\nSo, if the usage is in a markdown file, like so:\r\n\r\n```mdx\r\nimport MyComponent from '../../components/MyComponent';\r\n\r\n# Using the above component in a .mdx file (that can take components)\r\n\r\n{' '}\r\n\r\n<MyComponent title=\"This is a slot implementor\">### Here is some markdown content - With a bullet item.</MyComponent>\r\n```\r\n\r\n_MyComponent_ renders the markdown to html and then injects it into the div.\r\n\r\nThis actually has a big advantage -- consider that with the normal usage you don't have access to the slot contents: _Astro_ just plops the content into the _&lt;slot/&gt;_ tag. Using this method, however, allows you to access the content and further manipulate it before it gets inserted into the html.\r\n\r\nThis allows a great deal of flexibility in component design.\r\n\r\n### Yet Another Step\r\n\r\nNow, we get to the techniques used in _AstroWind_, we'll use the _pages/index.astro_ file to illustrate.\r\n\r\nYou'll note that the index file imports a lot of components, each one roughly analagous to a panel in the index page. Each of these components, in turn, is instantiated sequentially throughout the page. But, you'll notice that some of them use this kind of construct (we'll use the last section, _CallToAction_, as it is most illustrative of the technique):\r\n\r\n```astro\r\n<CallToAction\r\n  callToAction={{\r\n    text: 'Get template',\r\n    href: 'https://github.com/onwidget/astrowind',\r\n    icon: 'tabler:download',\r\n  }}\r\n>\r\n  <Fragment slot=\"title\">\r\n    Astro + <br class=\"block sm:hidden\" /><span class=\"sm:whitespace-nowrap\">Tailwind CSS</span>\r\n  </Fragment>\r\n\r\n  <Fragment slot=\"subtitle\">\r\n    Be very surprised by these huge fake numbers you are seeing on this page. <br class=\"hidden md:inline\" />Don't waste\r\n    more time! :P\r\n  </Fragment>\r\n</CallToAction>\r\n```\r\n\r\nSome things to note, here:\r\n\r\n<DListItem dt=\"The <em>callToAction</em> argument\">\r\n  This argument is actually being passed a javascript object -- not a string. (However, in the TS definition, it could\r\n  be a string...)\r\n</DListItem>\r\n<DListItem dt=\"There are several <em>Fragment</em> children\">\r\n  Furthermore, these &lt;Fragment/&gt; elements each have a _slot=\"(value)\"_ specifier.\r\n</DListItem>\r\n\r\nThe latter seems odd, because &lt;Fragment/&gt; is a built-in component over which you have no control, and doesn't have a provision for rendering slots, <em>per se</em>.\r\n\r\nThe answer lies in a paragraph in the _Astro_ docs, slots section, which states:\r\n\r\n> Use a `slot=\"my-slot\"` attribute on the child element that you want to pass through to a matching slot `name=\"my-slot\" />` placeholder in your component.\r\n\r\nThat's pretty concise and a bit of a head-scratcher to read, but basically what it says is that:\r\n\r\n1. Given a component that defines a slot:\r\n1. you can reference a slot from a child element of that component and,\r\n1. provide content to the parent component's slot from the child by naming the slot in the child with a `slot=\"<slot-name>\"` property assignment, where the _slot-name_ is the parent's slot.\r\n\r\nSo, in the example above, the _CallToAction_ component defines the _subtitle_ slot, and the following _&lt;Fragment slot=\"subtitle\"&gt;_ populates the slot with the following content:\r\n\r\n```astro\r\n<Fragment slot=\"subtitle\">\r\n  Be very surprised by these huge fake numbers you are seeing on this page. <br class=\"hidden md:inline\" />Don't waste\r\n  more time! :P\r\n</Fragment>\r\n```\r\n\r\nAnd, the _CallToAction_ component defines and renders it thusly:\r\n\r\n```astro\r\n---\r\n//...\r\nconst { subtitle = await Astro.slots.render('subtitle') } = Astro.props;\r\n---\r\n\r\n//...\r\n{subtitle && <p class=\"text-xl text-muted dark:text-slate-400\" set:html={subtitle} />}\r\n//...\r\n```\r\n\r\nThere's a lot to wrap your head around, here.\r\n\r\nNotice first that _subtitle_ is defined as a prop/argument, but it's being processed as a slot. Interestingly, prop args and slots seem to be somewhat interchangeable: if the subtitle was just a string, it would simply take that assignment. The main difference is that if you render them independently, you have to call the render with an _await_ modifier.\r\n";
						const data = {publishDate:new Date(1689552000000),title:"AstroWind template in depth",excerpt:"While easy to get started, Astrowind is quite complex internally.  This page provides documentation on some of the more intricate parts.",image:"https://images.unsplash.com/photo-1534307671554-9a6d81f4d629?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1651&q=80",category:"Documentation",tags:["astro","tailwind css","front-end"],metadata:{canonical:"https://astrowind.vercel.app/astrowind-template-in-depth"}};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/Jordi/Documents/web/calendaris/src/content/post/astrowind-template-in-depth.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
